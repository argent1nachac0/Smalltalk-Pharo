Object subclass: #Lista	instanceVariableNames: 'cantidad prim ult'	classVariableNames: ''	poolDictionaries: ''	category: ''!!Lista commentStamp: 'erick 11/16/2018 21:40' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:erickFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	cantidad:		<Object>	prim:		<Object>	prox:		<Object>	ult:		<Object>    Implementation Points!!Lista methodsFor: 'actions' stamp: 'erick 11/16/2018 22:05'!addFirst: unDato|nuevo|nuevo:= Nodo new.nuevo dato: unDato.self isEmpty ifTrue:[prim:= nuevo]				 ifFalse:[nuevo proximo: prim].prim:= nuevo.cantidad:= self cantidad +1.! !!Lista methodsFor: 'actions' stamp: 'erick 11/16/2018 21:49'!addLast: unDato|nuevo|nuevo:= Nodo new.nuevo dato: unDato.self isEmpty ifTrue:[prim:= nuevo]				 ifFalse:[ult proximo: nuevo].ult:= nuevo.cantidad:= self cantidad +1.! !!Lista methodsFor: 'actions' stamp: 'erick 11/16/2018 21:45'!add: unDatoself addLast: unDato.! !!Lista methodsFor: 'iterating' stamp: 'erick 11/16/2018 21:52'!do: unBloque	"recorre"|actual| actual:= prim.[ actual isNil ] whileFalse:[	unBloque value: actual dato.	actual := actual proximo.	].! !!Lista methodsFor: 'iterating' stamp: 'erick 11/16/2018 22:02'!item: idx	"comment stating purpose of message"| c |c := 0.self do:[:e| c:= c+1.	c = idx ifTrue:[ ^e ]		  ].^ nil! !!Lista methodsFor: 'instance creation' stamp: 'erick 11/16/2018 22:13'!from: init until: last	"comment stating purpose of message"| c nueva |nueva := Lista new.c := 0.self do:[:e| c:= c+1.	((c >= init) and: (c <= last)) ifTrue:[ nueva add: e ]		  ].^nueva! !!Lista methodsFor: 'printing' stamp: 'erick 11/16/2018 22:19'!printOn: unDato	"comment stating purpose of message"unDato nextPutAll: '['.	self do:[:elto| unDato nextPutAll: elto printString,'.'].unDato nextPutAll: ']'.! !!Lista methodsFor: 'accesing' stamp: 'erick 11/16/2018 21:50'!cantidad	"devuelve la cantidad de elementos"cantidad isNil ifTrue:[^0].^cantidad! !!Lista methodsFor: 'accesing' stamp: 'erick 11/16/2018 21:50'!isEmpty	"devuelve la cantidad de elementos"^prim isNil! !Object subclass: #Nodo	instanceVariableNames: 'dato proximo'	classVariableNames: ''	poolDictionaries: ''	category: ''!!Nodo commentStamp: 'erick 11/16/2018 21:41' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:erickFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	dato:		<Object>	proximo:		<Object>    Implementation Points!!Nodo methodsFor: 'accesing' stamp: 'erick 11/16/2018 21:47'!dato: unNodo	"comment stating purpose of message"dato:= unNodo! !!Nodo methodsFor: 'accesing' stamp: 'erick 11/16/2018 21:47'!proximo	"comment stating purpose of message"^proximo! !!Nodo methodsFor: 'accesing' stamp: 'erick 11/16/2018 21:47'!proximo: unNodo	"comment stating purpose of message"proximo:= unNodo.! !!Nodo methodsFor: 'accesing' stamp: 'erick 11/16/2018 21:42'!dato"devuelve el dato"^dato! !