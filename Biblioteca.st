Object subclass: #Apunte	instanceVariableNames: 'materia paginas autor ano'	classVariableNames: ''	poolDictionaries: ''	category: 'Biblioteca'!!Apunte methodsFor: 'accessing' stamp: 'Anonymous 11/12/2019 15:45'!autor autor:= UIManager default request: 'Ingrese autor:'.^autor! !!Apunte methodsFor: 'accessing' stamp: 'Anonymous 11/12/2019 15:44'!materia materia:= UIManager default request: 'Ingrese materia:'.^materia! !!Apunte methodsFor: 'accessing' stamp: 'Anonymous 11/12/2019 15:50'!ano ano:= UIManager default request: 'Ingrese ano del apunte:'.^ano! !!Apunte methodsFor: 'accessing' stamp: 'Anonymous 11/12/2019 15:49'!paginas paginas:= UIManager default request: 'Ingrese paginas del apunte:'.^paginas! !!Apunte methodsFor: 'accesing' stamp: 'Anonymous 11/12/2019 15:37'!año	"setter y getter que permite asignar y devolver el titulo"	ano:= UIManager default request: 'Ingrese el año del apunte:'.	^ano.	! !Object subclass: #Biblioteca	instanceVariableNames: 'libros apuntes listaAutor listaEditorial listaano listaTitulo listaMateria'	classVariableNames: ''	poolDictionaries: ''	category: 'Biblioteca'!!Biblioteca methodsFor: 'as yet unclassified' stamp: 'Anonymous 11/12/2019 18:06'!eliminarLibro |titulo|titulo:= UIManager default request: 'Ingrese el titulo del libro a eliminar:'. (self listaTitulo includes: titulo) ifTrue: [ 	1 to: self listaLibros size do: [:i|		((((self listaLibros at:i)substrings)at:1)=titulo) ifTrue: [ 			 self listaLibros removeAt: i			 ] 		 ]	 ]                   ifFalse: [ self error: 'El titulo ingresado no se encuentra en la lista' ]! !!Biblioteca methodsFor: 'as yet unclassified' stamp: 'Anonymous 11/12/2019 15:59'!listaEditoriallistaEditorial isNil ifTrue: [ listaEditorial:=OrderedCollection new ].^listaEditorial.! !!Biblioteca methodsFor: 'as yet unclassified' stamp: 'Anonymous 11/12/2019 16:27'!printOn:unaVentanaunaVentana nextPutAll:'--------------------------Coleccion------------------------';cr.unaVentana nextPutAll:'--------------------------Libros------------------------';cr.1 to: self cantidadLibros do:[:i| unaVentana nextPutAll:(self coleccionLibros at:i)asString].unaVentana nextPutAll:'--------------------------Fin Libros------------------------';cr.unaVentana nextPutAll:'--------------------------Apuntes------------------------';cr.1 to: self cantidadApuntes do:[:i| unaVentana nextPutAll:(self coleccionApuntes at:i)asString].unaVentana nextPutAll:'--------------------------Fin Apuntes------------------------';cr.unaVentana nextPutAll:'--------------------------Fin Coleccion------------------------';cr.! !!Biblioteca methodsFor: 'as yet unclassified' stamp: 'Anonymous 11/12/2019 16:26'!cantidadApuntes^self coleccionApuntes size! !!Biblioteca methodsFor: 'as yet unclassified' stamp: 'Anonymous 11/12/2019 17:59'!agregarLibro |libro titulo paginas autor editorial ano|libro:= Libro new.titulo:= libro titulo. self listaTitulo add: titulo.paginas:= libro paginas.autor:= libro autor. self listaAutor add: autor.editorial:= libro editorial. self listaEditorial add: editorial.ano:= libro ano. self listaano add: ano.self listaLibros add: (titulo,' ', paginas,' ', autor,' ', editorial,' ', ano).! !!Biblioteca methodsFor: 'as yet unclassified' stamp: 'Anonymous 11/12/2019 16:26'!cantidadLibros^self coleccionLibros size! !!Biblioteca methodsFor: 'as yet unclassified' stamp: 'Anonymous 11/12/2019 15:54'!listaLibroslibros isNil ifTrue: [ libros:=OrderedCollection new ].^libros.! !!Biblioteca methodsFor: 'as yet unclassified' stamp: 'Anonymous 11/12/2019 15:44'!coleccionLibros(libros isNil) ifTrue:[libros:= OrderedCollection new].^libros.! !!Biblioteca methodsFor: 'as yet unclassified' stamp: 'Anonymous 11/12/2019 17:48'!buscarLibroPorAno |ano enc|Transcript clear.enc:= OrderedCollection new.ano:= UIManager default request: 'Ingrese ano:'.(self listaano includes: ano) ifTrue: [ 	1 to: self listaLibros size do: [ :i|		((((self listaLibros at:i)substrings)at:5) = ano) ifTrue: [ 			 enc add:(self listaLibros at: i).					 ]		 ].	Transcript show: 'ano: ',ano. Transcript cr.	Transcript show: 'Titulo             Paginas             Autor             Editorial'.	Transcript cr.	  1 to: enc size do: [ :j|		 Transcript show:'  ',(((enc at:j)substrings)at:1),'                  ',		(((enc at:j)substrings)at:2),'                  ',		(((enc at:j)substrings)at:3),'                   ',		(((enc at:j)substrings)at:4). Transcript cr.		 ] ]    ifFalse: [ ^self error: 'El ano ingresado no se encuentra en la lista' ].! !!Biblioteca methodsFor: 'as yet unclassified' stamp: 'Anonymous 11/12/2019 15:58'!listaAutorlistaAutor isNil ifTrue: [ listaAutor:=OrderedCollection new ].^listaAutor.! !!Biblioteca methodsFor: 'as yet unclassified' stamp: 'Anonymous 11/12/2019 18:09'!eliminarApunte |materia|materia:= UIManager default request: 'Ingrese la materia del apunte a eliminar:'. (self listaMateria includes: materia) ifTrue: [ 	1 to: self listaApuntes size do: [:i|		((((self listaApuntes at:i)substrings)at:1)=materia) ifTrue: [ 			 self listaApuntes removeAt: i			 ] 		 ]	 ]                   ifFalse: [ self error: 'La materia ingresada no se encuentra en la lista' ]! !!Biblioteca methodsFor: 'as yet unclassified' stamp: 'Anonymous 11/12/2019 15:45'!coleccionApuntes(apuntes isNil) ifTrue:[apuntes:= OrderedCollection new].^apuntes.! !!Biblioteca methodsFor: 'as yet unclassified' stamp: 'Anonymous 11/12/2019 17:38'!buscarLibroPorEditorial |editorial enc|Transcript clear.enc:= OrderedCollection new.editorial:= UIManager default request: 'Ingrese editorial:'.(self listaEditorial includes: editorial) ifTrue: [ 	1 to: self listaLibros size do: [ :i|		((((self listaLibros at:i)substrings)at:4) = editorial) ifTrue: [ 			 enc add:(self listaLibros at: i).					 ]		 ].	Transcript show: 'Editorial: ',editorial. Transcript cr.	Transcript show: 'Titulo             Paginas             Autor             ano'.	Transcript cr.	  1 to: enc size do: [ :j|		 Transcript show:'  ',(((enc at:j)substrings)at:1),'                 ',		(((enc at:j)substrings)at:2),'                ',		(((enc at:j)substrings)at:3),'                 ',		(((enc at:j)substrings)at:5). Transcript cr.		 ] ]    ifFalse: [ ^self error: 'La editorial ingresada no se encuentra en la lista' ].! !!Biblioteca methodsFor: 'as yet unclassified' stamp: 'Anonymous 11/12/2019 17:58'!agregarApuntes |apunte materia paginas autor ano|apunte:= Apunte new.materia:= apunte materia. self listaMateria add: materia.paginas:= apunte paginas.autor:= apunte autor.ano:= apunte ano.self listaApuntes add: (materia,' ',paginas,' ',autor,' ', ano).! !!Biblioteca methodsFor: 'as yet unclassified' stamp: 'Anonymous 11/12/2019 15:54'!listaApuntesapuntes isNil ifTrue: [ apuntes:=OrderedCollection new ].^apuntes.! !!Biblioteca methodsFor: 'as yet unclassified' stamp: 'Anonymous 11/12/2019 17:12'!buscarLibroPorAutor |autor enc|Transcript clear.enc:= OrderedCollection new.autor:= UIManager default request: 'Ingrese nombre del autor:'.(self listaAutor includes: autor) ifTrue: [ 	1 to: self listaLibros size do: [ :i|		((((self listaLibros at:i)substrings)at:3) = autor) ifTrue: [ 			 enc add:(self listaLibros at: i).					 ]		 ].	Transcript show: 'Autor: ',autor. Transcript cr.	Transcript show: 'Titulo          Paginas              Editorial              ano'.	Transcript cr.	  1 to: enc size do: [ :j|		 Transcript show:'   ',(((enc at:j)substrings)at:1),'               ',		(((enc at:j)substrings)at:2),'                ',		(((enc at:j)substrings)at:4),'                        ',		(((enc at:j)substrings)at:5).		Transcript cr.		 ]    ]    ifFalse: [ ^self error: 'El nombre del autor ingresado no se encuentra en la lista' ].! !!Biblioteca methodsFor: 'as yet unclassified' stamp: 'Anonymous 11/13/2019 16:47'!listaanolistaano isNil ifTrue: [ listaano:=OrderedCollection new ].^listaano.! !!Biblioteca methodsFor: 'accessing' stamp: 'Anonymous 11/12/2019 17:57'!listaMateria listaMateria isNil ifTrue: [ listaMateria:= OrderedCollection new]. ^listaMateria.! !!Biblioteca methodsFor: 'accessing' stamp: 'Anonymous 11/12/2019 17:56'!listaTitulo listaTitulo isNil ifTrue: [ listaTitulo:= OrderedCollection new]. ^listaTitulo.! !Object subclass: #Libro	instanceVariableNames: 'titulo paginas autor ano editorial'	classVariableNames: ''	poolDictionaries: ''	category: 'Biblioteca'!!Libro methodsFor: 'accesing' stamp: 'Anonymous 11/12/2019 13:16'!titulo	"setter y getter que permite asignar y devolver el titulo"	titulo:= UIManager default request: 'Ingrese titulo:'.	^titulo.	! !!Libro methodsFor: 'accesing' stamp: 'Anonymous 11/12/2019 15:37'!paginas   paginas:= UIManager default request: 'Ingrese cantidad de paginas de del libro:'.^paginas.! !!Libro methodsFor: 'accesing' stamp: 'Anonymous 11/12/2019 15:31'!año	"setter y getter que permite asignar y devolver el titulo"	ano:= UIManager default request: 'Ingrese año:'.	^ano.	! !!Libro methodsFor: 'accesing' stamp: 'Anonymous 11/12/2019 15:32'!genero	"setter y getter que permite asignar y devolver el titulo"	genero:= UIManager default request: 'Ingrese genero del libro:'.	^genero.	! !!Libro methodsFor: 'accesing' stamp: 'Anonymous 11/12/2019 15:42'!ano	ano:= UIManager default request: 'Ingrese el ano de publicaci√≥n:'.	^ano.! !!Libro methodsFor: 'accesing' stamp: 'Anonymous 11/12/2019 15:42'!editorial	editorial:= UIManager default request: 'Ingrese la editorial:'.	^editorial.! !!Libro methodsFor: 'accesing' stamp: 'Anonymous 11/12/2019 15:40'!autor	autor:= UIManager default request: 'Ingrese el nombre del autor'.	^autor.! !